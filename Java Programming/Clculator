import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;
import java.util.Stack;

public class ScientificCalculator extends Application {

    private TextField display = new TextField();
    private String currentInput = "";

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("Scientific Calculator");

        // Create a grid layout for the calculator buttons
        GridPane grid = new GridPane();
        grid.setAlignment(Pos.CENTER);
        grid.setHgap(10);
        grid.setVgap(10);
        grid.setPadding(new Insets(10, 10, 10, 10));

        // Configure the display text field
        display.setEditable(false);
        display.setMinSize(300, 50);

        // Add the display at the top
        HBox displayBox = new HBox(display);
        displayBox.setAlignment(Pos.CENTER);
        grid.add(displayBox, 0, 0, 4, 1);

        // Define button labels for the calculator
        String[][] buttonText = {
            {"7", "8", "9", "/"},
            {"4", "5", "6", "*"},
            {"1", "2", "3", "-"},
            {"0", ".", "=", "+"},
            {"sin", "cos", "tan", "sqrt"},
            {"log", "ln", "pi", "C"}
        };

        // Create buttons and add them to the grid
        for (int row = 1; row <= buttonText.length; row++) {
            for (int col = 0; col < buttonText[row - 1].length; col++) {
                String label = buttonText[row - 1][col];
                Button button = new Button(label);
                button.setMinSize(60, 60);
                button.setOnAction(e -> handleButtonPress(label));
                grid.add(button, col, row);
            }
        }

        // Set the scene and show the stage
        Scene scene = new Scene(grid, 320, 450);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    // Method to handle button press events
    private void handleButtonPress(String label) {
        switch (label) {
            case "=":
                calculateResult();
                break;
            case "C":
                clearDisplay();
                break;
            case "sin":
            case "cos":
            case "tan":
            case "log":
            case "ln":
            case "sqrt":
            case "pi":
                handleScientificFunction(label);
                break;
            default:
                currentInput += label;
                display.setText(currentInput);
                break;
        }
    }

    // Method to handle scientific functions
    private void handleScientificFunction(String function) {
        try {
            double input = Double.parseDouble(currentInput);
            double result = 0;

            switch (function) {
                case "sin":
                    result = Math.sin(Math.toRadians(input));
                    break;
                case "cos":
                    result = Math.cos(Math.toRadians(input));
                    break;
                case "tan":
                    result = Math.tan(Math.toRadians(input));
                    break;
                case "log":
                    result = Math.log10(input);
                    break;
                case "ln":
                    result = Math.log(input);
                    break;
                case "sqrt":
                    result = Math.sqrt(input);
                    break;
                case "pi":
                    result = Math.PI;
                    break;
            }

            display.setText(String.valueOf(result));
            currentInput = String.valueOf(result);

        } catch (NumberFormatException e) {
            display.setText("Error");
            currentInput = "";
        }
    }

    // Method to calculate and display the result
    private void calculateResult() {
        try {
            double result = evaluateExpression(currentInput);
            display.setText(String.valueOf(result));
            currentInput = String.valueOf(result);
        } catch (Exception e) {
            display.setText("Error");
            currentInput = "";
        }
    }

    // Method to clear the display
    private void clearDisplay() {
        currentInput = "";
        display.setText("");
    }

    // Method to evaluate simple mathematical expressions
    private double evaluateExpression(String expression) {
        Stack<Double> numbers = new Stack<>();
        Stack<Character> operations = new Stack<>();

        for (int i = 0; i < expression.length(); i++) {
            char c = expression.charAt(i);

            // Skip spaces
            if (c == ' ') continue;

            // If the character is a number, parse it
            if (Character.isDigit(c)) {
                StringBuilder sb = new StringBuilder();
                while (i < expression.length() && (Character.isDigit(expression.charAt(i)) || expression.charAt(i) == '.')) {
                    sb.append(expression.charAt(i));
                    i++;
                }
                numbers.push(Double.parseDouble(sb.toString()));
                i--;
            } else if (c == '(') {
                operations.push(c
